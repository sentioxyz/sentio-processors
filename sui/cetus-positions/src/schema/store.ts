
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface PositionSnapshotConstructorInput {
  id: String;
  owner: String;
  pool: String;
  timestamp: BigInt;
  price: BigDecimal;
  liquidity: BigInt;
  tickLower: BigInt;
  tickUpper: BigInt;
  coinTypeA: String;
  coinTypeB: String;
  coinSymbolA: String;
  coinSymbolB: String;
  amountA: BigDecimal;
  amountB: BigDecimal;
  usdValue: BigDecimal;
}
@Entity("PositionSnapshot")
export class PositionSnapshot extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("String")
	owner: String

	@Required
	@Column("String")
	pool: String

	@Required
	@Column("BigInt")
	timestamp: BigInt

	@Required
	@Column("BigDecimal")
	price: BigDecimal

	@Required
	@Column("BigInt")
	liquidity: BigInt

	@Required
	@Column("BigInt")
	tickLower: BigInt

	@Required
	@Column("BigInt")
	tickUpper: BigInt

	@Required
	@Column("String")
	coinTypeA: String

	@Required
	@Column("String")
	coinTypeB: String

	@Required
	@Column("String")
	coinSymbolA: String

	@Required
	@Column("String")
	coinSymbolB: String

	@Required
	@Column("BigDecimal")
	amountA: BigDecimal

	@Required
	@Column("BigDecimal")
	amountB: BigDecimal

	@Required
	@Column("BigDecimal")
	usdValue: BigDecimal
  constructor(data: PositionSnapshotConstructorInput) {super()}
  
}


const source = `type PositionSnapshot @entity {
  id: String!
  owner: String!
  pool: String!
  timestamp: BigInt!
  price: BigDecimal!
  liquidity: BigInt!
  tickLower: BigInt!
  tickUpper: BigInt!
  coinTypeA: String!
  coinTypeB: String!
  coinSymbolA: String!
  coinSymbolB: String!
  amountA: BigDecimal!
  amountB: BigDecimal!
  usdValue: BigDecimal!
}
`
DatabaseSchema.register({
  source,
  entities: {
    "PositionSnapshot": PositionSnapshot
  }
})

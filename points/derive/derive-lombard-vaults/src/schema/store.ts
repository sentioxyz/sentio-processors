
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity, getStore, UpdateValues } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface DeriveVaultUserSnapshotConstructorInput {
  id: ID;
  owner: String;
  vaultName: String;
  vaultAddress: String;
  timestampMs: BigInt;
  vaultBalance: BigDecimal;
  underlyingEffectiveBalance: BigDecimal;
  vaultToUnderlying: BigDecimal;
}
@Entity("DeriveVaultUserSnapshot")
export class DeriveVaultUserSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	owner: String

	@Required
	@Column("String")
	vaultName: String

	@Required
	@Column("String")
	vaultAddress: String

	@Required
	@Column("BigInt")
	timestampMs: BigInt

	@Required
	@Column("BigDecimal")
	vaultBalance: BigDecimal

	@Required
	@Column("BigDecimal")
	underlyingEffectiveBalance: BigDecimal

	@Required
	@Column("BigDecimal")
	vaultToUnderlying: BigDecimal
  constructor(data: DeriveVaultUserSnapshotConstructorInput) {super()}
  
  
  static update(values: UpdateValues<DeriveVaultUserSnapshotConstructorInput>): Promise<void> {
    return getStore().update(DeriveVaultUserSnapshot, values)
  }
}


interface DeriveVaultTokenPriceConstructorInput {
  id: ID;
  vaultAddress: String;
  vaultName: String;
  timestampMs: BigInt;
  vaultToUnderlying: BigDecimal;
}
@Entity("DeriveVaultTokenPrice")
export class DeriveVaultTokenPrice extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	vaultAddress: String

	@Required
	@Column("String")
	vaultName: String

	@Required
	@Column("BigInt")
	timestampMs: BigInt

	@Required
	@Column("BigDecimal")
	vaultToUnderlying: BigDecimal
  constructor(data: DeriveVaultTokenPriceConstructorInput) {super()}
  
  
  static update(values: UpdateValues<DeriveVaultTokenPriceConstructorInput>): Promise<void> {
    return getStore().update(DeriveVaultTokenPrice, values)
  }
}


const source = `type DeriveVaultUserSnapshot @entity {
    id: ID!
    owner: String!
    vaultName: String!
    vaultAddress: String!
    timestampMs: BigInt!
    vaultBalance: BigDecimal!
    underlyingEffectiveBalance: BigDecimal!
    vaultToUnderlying: BigDecimal!
}

type DeriveVaultTokenPrice @entity {
    id: ID!
    vaultAddress: String!
    vaultName: String!
    timestampMs: BigInt!
    vaultToUnderlying: BigDecimal!
}`
DatabaseSchema.register({
  source,
  entities: {
    "DeriveVaultUserSnapshot": DeriveVaultUserSnapshot,
		"DeriveVaultTokenPrice": DeriveVaultTokenPrice
  }
})

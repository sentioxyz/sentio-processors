
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface PoolConstructorInput {
  id: ID;
  base: String;
  quote: String;
  poolIdx: BigInt;
}
@Entity("Pool")
export class Pool extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	base: String

	@Required
	@Column("String")
	quote: String

	@Required
	@Column("BigInt")
	poolIdx: BigInt
  constructor(data: PoolConstructorInput) {super()}
  
}


interface RangePositionSnapshotConstructorInput {
  id: ID;
  poolHash: String;
  owner: String;
  lowTick: BigInt;
  highTick: BigInt;
  amountStone: BigInt;
  timestampMilli: BigInt;
}
@Entity("RangePositionSnapshot")
export class RangePositionSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	poolHash: String

	@Required
	@Column("String")
	owner: String

	@Required
	@Column("BigInt")
	lowTick: BigInt

	@Required
	@Column("BigInt")
	highTick: BigInt

	@Required
	@Column("BigInt")
	amountStone: BigInt

	@Required
	@Column("BigInt")
	timestampMilli: BigInt
  constructor(data: RangePositionSnapshotConstructorInput) {super()}
  
}


interface AmbientPositionSnapshotConstructorInput {
  id: ID;
  poolHash: String;
  owner: String;
  amountStone: BigInt;
  timestampMilli: BigInt;
}
@Entity("AmbientPositionSnapshot")
export class AmbientPositionSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	poolHash: String

	@Required
	@Column("String")
	owner: String

	@Required
	@Column("BigInt")
	amountStone: BigInt

	@Required
	@Column("BigInt")
	timestampMilli: BigInt
  constructor(data: AmbientPositionSnapshotConstructorInput) {super()}
  
}


const source = `type Pool @entity {
    id: ID!
    base: String!
    quote: String!
    poolIdx: BigInt!
}

type RangePositionSnapshot @entity {
    id: ID!
    poolHash: String!
    owner: String!
    lowTick: BigInt!
    highTick: BigInt!
    amountStone: BigInt!
    timestampMilli: BigInt!
}

type AmbientPositionSnapshot @entity {
    id: ID!
    poolHash: String!
    owner: String!
    amountStone: BigInt!
    timestampMilli: BigInt!
}`
DatabaseSchema.register({
  source,
  entities: {
    "Pool": Pool,
		"RangePositionSnapshot": RangePositionSnapshot,
		"AmbientPositionSnapshot": AmbientPositionSnapshot
  }
})
